{"version":"0.1.1","type":"application/json","title":"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced","plugin-type":"plugin","parent-plugin":"$:/plugins/tiddlywiki/codemirror","name":"CodeMirror TW5 Enhanced","list":"readme ControlPanel","description":"TiddlyWiki5 highlighting mode for CodeMirror","dependents":"$:/plugins/tiddlywiki/codemirror-autocomplete","author":"Gk0Wk","email":"nmg_wk@yeah.net","source":"https://github.com/Gk0Wk/TW5-CodeMirror-Enhanced","text":"{\"tiddlers\":{\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/mode/tiddlywiki5.js\":{\"text\":\"// CodeMirror, copyright (c) by Marijn Haverbeke and others\\n// Distributed under an MIT license: https://codemirror.net/LICENSE\\n\\n/* Enhance from and specially thank to https://github.com/adithya-badidey/TW5-codemirror-plus,\\n   and the original author of this mode is PMario(https://github.com/pmario) */\\n(function(mod) {\\n    if (typeof exports == \\\"object\\\" && typeof module == \\\"object\\\") // CommonJS\\n        mod(require(\\\"$:/plugins/tiddlywiki/codemirror/lib/codemirror.js\\\"));\\n    else if (typeof define == \\\"function\\\" && define.amd) // AMD\\n        define([\\\"$:/plugins/tiddlywiki/codemirror/lib/codemirror.js\\\"], mod);\\n    else // Plain browser env\\n        mod(CodeMirror);\\n})(function(CodeMirror) {\\n    \\\"use strict\\\";\\n\\n    CodeMirror.defineMode(\\\"tiddlywiki5\\\", function(cmCfg, modeCfg) {\\n        var styleSheet = {\\n            'rainbow': ['keyword', 'variable-2', 'variable-3']\\n        };\\n\\n        var macroKeywords = {\\n            \\\"changecount\\\": true,\\n            \\\"colour\\\": true,\\n            \\\"colour-picker\\\": true,\\n            \\\"contrastcolour\\\": true,\\n            \\\"copy-to-clipboard\\\": true,\\n            \\\"csvtiddlers\\\": true,\\n            \\\"datauri\\\": true,\\n            \\\"dumpvariables\\\": true,\\n            \\\"image-picker\\\": true,\\n            \\\"jsontiddler\\\": true,\\n            \\\"jsontiddlers\\\": true,\\n            \\\"lingo\\\": true,\\n            \\\"list-links\\\": true,\\n            \\\"list-links-draggable\\\": true,\\n            \\\"list-tagged-draggable\\\": true,\\n            \\\"list-thumbnails\\\": true,\\n            \\\"makedatauri\\\": true,\\n            \\\"now\\\": true,\\n            \\\"qualify\\\": true,\\n            \\\"resolvepath\\\": true,\\n            \\\"box-shadow\\\": true,\\n            \\\"filter\\\": true,\\n            \\\"transition\\\": true,\\n            \\\"background-linear-gradient\\\": true,\\n            \\\"transform-origin\\\": true,\\n            \\\"toc\\\": true,\\n            \\\"toc-expandable\\\": true,\\n            \\\"toc-selective-expandable\\\": true,\\n            \\\"toc-tabbed-internal-nav\\\": true,\\n            \\\"toc-tabbed-external-nav\\\": true,\\n            \\\"tabs\\\": true,\\n            \\\"tag\\\": true,\\n            \\\"tag-picker\\\": true,\\n            \\\"tag-pill\\\": true,\\n            \\\"thumbnail\\\": true,\\n            \\\"timeline\\\": true,\\n            \\\"tree\\\": true,\\n            \\\"unusedtitle\\\": true,\\n            \\\"version\\\": true\\n        };\\n\\n        function getMode(name) {\\n            if (CodeMirror.findModeByName) {\\n                var found = CodeMirror.findModeByName(name);\\n                if (found) name = found.mime || found.mimes[0];\\n            }\\n            var mode_ = CodeMirror.getMode(cmCfg, name);\\n            return mode_.name == \\\"null\\\" ? null : mode_;\\n        }\\n\\n        if (modeCfg.fencedCodeBlockHighlighting === undefined)\\n            modeCfg.fencedCodeBlockHighlighting = true;\\n\\n        if (modeCfg.fencedCodeBlockDefaultMode === undefined)\\n            modeCfg.fencedCodeBlockDefaultMode = 'text/plain';\\n\\n        var reHR = /^\\\\-\\\\-\\\\-+$/, // <hr>\\n            reBlockQuote = /^<<</,\\n            rePreStart = /^```[ \\\\t]*([\\\\w\\\\/+#-]*)[^\\\\n`]*$/,\\n            rePreEnd = /^```$/;\\n\\n        function chain(stream, state, f) {\\n            state.tokenize = f;\\n            return f(stream, state);\\n        }\\n\\n        function onNewLine(state) {\\n            state.line++;\\n            state.listLevel = 0;\\n            state.boldLine = false;\\n        }\\n\\n        function tokenBase(stream, state) {\\n            var sol = stream.sol();\\n            // 解析\\n            var tokens = tokenBaseBald(sol, stream, state);\\n            if (tokens == null) tokens = '';\\n            // 后缀\\n            if (state.quoteLevel > 0 && sol) {\\n                tokens += ' line-cm-quote-line quote-' + state.quoteLevel;\\n            }\\n            if (state.codeBlockModeState != null) {\\n                tokens += ' comment';\\n            }\\n            if (state.listLevel > 0) {\\n                tokens += ' list ' + styleSheet.rainbow[state.listLevel % styleSheet.rainbow.length];\\n            }\\n            if (state.boldLine) {\\n                tokens += ' strong';\\n            }\\n            return tokens.trim();\\n        }\\n\\n        function tokenBaseBald(sol, stream, state) {\\n            var ch = stream.peek(); // Returns the next character in the stream without advancing it. Will return a null at the end of the line.\\n\\n            // 检查是不是block的开头\\n            // 两个条件：1.在行首 2.以</*{}-`开头\\n            if (sol && /[<\\\\/\\\\*{}\\\\-`]/.test(ch)) {\\n                // <<<引用block\\n                if (stream.match(reBlockQuote)) {\\n                    return twTokenQuote(stream, state);\\n                }\\n\\n                // 分割线\\n                if (stream.match(reHR))\\n                    return 'hr';\\n\\n                // 代码块\\n                var match = null;\\n                if (match = stream.match(rePreStart, false))\\n                    return twTokenPre(stream, state, match);\\n            }\\n\\n            // 其他情况\\n            var matched = null;\\n            if (sol && (matched = stream.match(/^\\\\s*([\\\\/\\\\*!#;:>|])/))) {\\n                ch = matched[1];\\n                // 标题\\n                if (ch === \\\"!\\\") {\\n                    var countOfHeaderLevel = 1;\\n                    while (stream.eat('!'))\\n                        countOfHeaderLevel++;\\n                    stream.skipToEnd();\\n                    return 'header h' + countOfHeaderLevel;\\n                }\\n\\n                // 列表\\n                if (/[\\\\*#;:]/.test(ch)) {\\n                    var countOfListLevel = 1;\\n                    var past_ch = ch;\\n                    while (ch = stream.eat(/[\\\\*#;:]/)) {\\n                        countOfListLevel++;\\n                        past_ch = ch;\\n                    }\\n                    state.boldLine = past_ch === \\\";\\\";\\n                    state.listLevel = countOfListLevel;\\n                    return 'list ' + styleSheet.rainbow[countOfListLevel % styleSheet.rainbow.length] + (past_ch === \\\";\\\" ? ' strong' : '');\\n                }\\n                if (ch === \\\">\\\") { // single line quote\\n                    stream.eatWhile(\\\">\\\");\\n                    return \\\"quote\\\";\\n                }\\n                if (ch === \\\"|\\\")\\n                    return 'header';\\n            }\\n\\n            stream.next();\\n\\n            // 外部链接\\n            // rudimentary html:// file:// link matching. TW knows much more ...\\n            if (/[hf]/i.test(ch) &&\\n                /[ti]/i.test(stream.peek()) &&\\n                stream.match(/\\\\b(ttps?|tp|ile):\\\\/\\\\/[\\\\-A-Z0-9+&@#\\\\/%?=~_|$!:,.;]*[A-Z0-9+&@#\\\\/%=~_|$]/i, true))\\n                return 'externallink link';\\n\\n            // LaTeX 公式\\n            if (ch == '$' && stream.match(\\\"$\\\", false) && !stream.match(\\\"$$\\\", false)) {\\n                stream.next();\\n                return twTokenFormula(stream, state);\\n            }\\n\\n            // `xx`等宽\\n            if (ch == '`') {\\n                return chain(stream, state, twTokenMonospace);\\n            }\\n\\n            // 斜体\\n            if (ch == \\\"/\\\" && stream.eat(\\\"/\\\")) {\\n                return chain(stream, state, twTokenEm);\\n            }\\n\\n            //\\n            if (ch == \\\"{\\\" && stream.eat(\\\"{\\\"))\\n                return chain(stream, state, twTranslclude);\\n\\n            // wikilink 或 图片\\n            if (ch == \\\"[\\\" && stream.eat(\\\"[\\\"))\\n                return chain(stream, state, twInternalLink);\\n\\n            // 下划线\\n            if (ch == \\\"_\\\" && stream.eat(\\\"_\\\"))\\n                return chain(stream, state, twTokenUnderline);\\n\\n            // 上角标\\n            if (ch == \\\"^\\\" && stream.eat(\\\"^\\\"))\\n                return chain(stream, state, twSuperscript);\\n\\n            // 下角标\\n            if (ch == \\\",\\\" && stream.eat(\\\",\\\"))\\n                return chain(stream, state, twSubscript);\\n\\n            // 删除线\\n            if (ch == \\\"~\\\" && stream.eat(\\\"~\\\")) {\\n                return chain(stream, state, twTokenStrike);\\n            }\\n\\n            // 粗体\\n            if (ch == \\\"'\\\" && stream.eat(\\\"'\\\"))\\n                return chain(stream, state, twTokenStrong);\\n\\n            // 宏\\n            if (ch == \\\"<\\\" && stream.eat(\\\"<\\\"))\\n                return chain(stream, state, twTokenMacro);\\n\\n            return null;\\n        }\\n\\n        // 粗体\\n        function twTokenStrong(stream, state) {\\n            var maybeEnd = false,\\n                ch;\\n            while (ch = stream.next()) {\\n                if (ch == \\\"'\\\" && maybeEnd) {\\n                    state.tokenize = tokenBase;\\n                    break;\\n                }\\n                maybeEnd = (ch == \\\"'\\\");\\n            }\\n            return \\\"strong\\\";\\n        }\\n\\n        // `xx`等宽\\n        function twTokenMonospace(stream, state) {\\n            var ch;\\n            while (ch = stream.next()) {\\n                if (ch == \\\"`\\\") {\\n                    state.tokenize = tokenBase;\\n                    break;\\n                }\\n            }\\n            return \\\"comment\\\";\\n        }\\n\\n        // 斜体\\n        function twTokenEm(stream, state) {\\n            var maybeEnd = false,\\n                ch;\\n            while (ch = stream.next()) {\\n                if (ch == \\\"/\\\" && maybeEnd) {\\n                    state.tokenize = tokenBase;\\n                    break;\\n                }\\n                maybeEnd = (ch == \\\"/\\\");\\n            }\\n            return \\\"em\\\";\\n        }\\n\\n        // 包含\\n        function twTranslclude(stream, state) {\\n            state.tokenize = function(stream_, state_) {\\n                var ch;\\n                while (ch = stream_.next()) {\\n                    if (ch === \\\"}\\\" && stream_.peek() === \\\"}\\\") {\\n                        stream_.backUp(1);\\n                        state_.tokenize = function(stream__, state__) {\\n                            stream__.match(\\\"}}\\\");\\n                            state__.tokenize = tokenBase;\\n                            return \\\"builtin\\\";\\n                        };\\n                        break;\\n                    }\\n                }\\n                return \\\"builtin internallink\\\";\\n            };\\n            return \\\"builtin\\\";\\n        }\\n\\n        // tw internal links\\n        function twInternalLink(stream, state) {\\n            // 开头 [[\\n            if (stream.current() == '[[') {\\n                state.pastDivider = false;\\n                return 'link';\\n            }\\n            // 结尾 ]]\\n            if (stream.peek() == ']') {\\n                stream.next();\\n                if (stream.next() == ']') {\\n                    state.tokenize = tokenBase;\\n                    return 'link';\\n                }\\n            }\\n            var pastDivider = state.pastDivider,\\n                ch;\\n            while (ch = stream.peek()) {\\n                if (!pastDivider && ch == '|') {\\n                    stream.next();\\n                    state.pastDivider = true;\\n                    return 'internallink link';\\n                }\\n                if (ch == \\\"]\\\" && stream.peek() == \\\"]\\\") {\\n                    return 'internallink link';\\n                }\\n                ch = stream.next();\\n                if (/[hf]/i.test(ch) &&\\n                    /[ti]/i.test(stream.peek()) &&\\n                    stream.match(/\\\\b(ttps?|tp|ile):\\\\/\\\\/[\\\\-A-Z0-9+&@#\\\\/%?=~_|$!:,.;]*[A-Z0-9+&@#\\\\/%=~_|$]/i, true)) {\\n                    return 'externallink link';\\n                }\\n                stream.eatWhile(/[^|\\\\]]/);\\n            }\\n            return null;\\n        }\\n\\n        // tw underlined text\\n        function twTokenUnderline(stream, state) {\\n            var maybeEnd = false,\\n                ch;\\n            while (ch = stream.next()) {\\n                if (ch == \\\"_\\\" && maybeEnd) {\\n                    state.tokenize = tokenBase;\\n                    break;\\n                }\\n                maybeEnd = (ch == \\\"_\\\");\\n            }\\n            return \\\"underlined\\\";\\n        }\\n\\n        function twSubscript(stream, state) {\\n            var maybeEnd = false,\\n                ch;\\n\\n            while (ch = stream.next()) {\\n                if (ch == \\\",\\\" && maybeEnd) {\\n                    state.tokenize = tokenBase;\\n                    break;\\n                }\\n                maybeEnd = (ch == \\\",\\\");\\n            }\\n            return \\\"string subscript\\\";\\n        }\\n\\n        function twSuperscript(stream, state) {\\n            var maybeEnd = false,\\n                ch;\\n\\n            while (ch = stream.next()) {\\n                if (ch == \\\"^\\\" && maybeEnd) {\\n                    state.tokenize = tokenBase;\\n                    break;\\n                }\\n                maybeEnd = (ch == \\\"^\\\");\\n            }\\n            return \\\"string superscript\\\";\\n        }\\n\\n        function twTokenStrike(stream, state) {\\n            var maybeEnd = false,\\n                ch;\\n\\n            while (ch = stream.next()) {\\n                if (ch == \\\"~\\\" && maybeEnd) {\\n                    state.tokenize = tokenBase;\\n                    break;\\n                }\\n                maybeEnd = (ch == \\\"~\\\");\\n            }\\n            return \\\"strikethrough\\\";\\n        }\\n\\n        // LaTeX公式\\n        function twTokenFormula(stream, state) {\\n            state.tokenize = tokenBase;\\n            var innerMode = modeCfg.fencedCodeBlockHighlighting && getMode(\\\"text/x-latex\\\");\\n            state.LaTeXModeState = !innerMode ? 'unknown' : {\\n                mode: innerMode,\\n                state: CodeMirror.startState(innerMode),\\n                start: state.line\\n            };\\n            return \\\"comment\\\";\\n        }\\n\\n        function twTokenPre(stream, state, match) {\\n            state.tokenize = function(stream_, state_) {\\n                state_.tokenize = tokenBase;\\n                var innerMode = modeCfg.fencedCodeBlockHighlighting &&\\n                    getMode(match[1] || modeCfg.fencedCodeBlockDefaultMode);\\n                state_.codeBlockModeState = !innerMode ? 'unknown' : {\\n                    mode: innerMode,\\n                    state: CodeMirror.startState(innerMode),\\n                    start: state.line\\n                };\\n                if (match[1]) {\\n                    stream_.skipToEnd();\\n                    return \\\"tag\\\";\\n                } else {\\n                    return null;\\n                }\\n            };\\n            stream.match('```');\\n            return \\\"comment\\\";\\n        }\\n\\n        function twTokenQuote(stream, state) {\\n            var level = 1;\\n            while (stream.match(reBlockQuote))\\n                level++;\\n            if (state.quoteLevel == level) {\\n                state.quoteLevel--;\\n            } else if (state.quoteLevel < level) {\\n                state.quoteHead = true;\\n                state.quoteLevel = level;\\n                state.tokenize = function(stream_, state_) {\\n                    state_.quoteHead = false;\\n                    state_.tokenize = tokenBase;\\n                    if (!stream_.sol()) {\\n                        stream_.skipToEnd();\\n                        return \\\"tag\\\";\\n                    } else {\\n                        return null;\\n                    }\\n                };\\n            } else {\\n                state.quoteLevel = level - 1;\\n            }\\n            return \\\"quote line-cm-quote-line\\\";\\n        }\\n\\n        function twTokenMacro(stream, state) {\\n            if (stream.current() == '<<') {\\n                return 'macro';\\n            }\\n\\n            var ch = stream.next();\\n            if (!ch) {\\n                state.tokenize = tokenBase;\\n                return null;\\n            }\\n            if (ch == \\\">\\\") {\\n                if (stream.peek() == '>') {\\n                    stream.next();\\n                    state.tokenize = tokenBase;\\n                    return \\\"macro\\\";\\n                }\\n            }\\n\\n            stream.eatWhile(/[\\\\w\\\\$_]/);\\n            return macroKeywords.propertyIsEnumerable(stream.current()) ? \\\"keyword\\\" : \\\"macro\\\";\\n        }\\n\\n        // Interface\\n        var mode = {\\n            blankLine: function(stream) {\\n                onNewLine(stream);\\n                return \\\"\\\";\\n            },\\n            closeBrackets: \\\"()[]{}''\\\\\\\"\\\\\\\"``\\\",\\n            startState: function() {\\n                return {\\n                    tokenize: tokenBase, // 当前解析器\\n                    curStream: null,\\n                    line: 0,\\n                    quoteLevel: 0,\\n                    quoteHead: false,\\n                    listLevel: 0,\\n                    boldLine: false,\\n                    codeBlockModeState: null,\\n                    LaTeXModeState: null\\n                };\\n            },\\n            copyState: function(oldState) {\\n                var newState = {};\\n                for (var key in oldState) newState[key] = oldState[key];\\n                if (oldState.codeBlockModeState && typeof oldState.codeBlockModeState == 'object')\\n                    newState.codeBlockModeState = {\\n                        mode: oldState.codeBlockModeState.mode,\\n                        state: CodeMirror.copyState(oldState.codeBlockModeState.mode, oldState.codeBlockModeState.state),\\n                        start: oldState.start\\n                    };\\n                if (oldState.LaTeXModeState)\\n                    newState.LaTeXModeState = {\\n                        mode: oldState.LaTeXModeState.mode,\\n                        state: CodeMirror.copyState(oldState.LaTeXModeState.mode, oldState.LaTeXModeState.state),\\n                        start: oldState.start\\n                    };\\n            },\\n            token: function(stream, state) {\\n                // 新的一行\\n                if (stream != state.curStream) {\\n                    onNewLine(state);\\n                    state.curStream = stream;\\n                }\\n\\n                // ```代码块\\n                if (state.codeBlockModeState != null) {\\n                    // 代码块的结束\\n                    if (stream.match(rePreEnd)) {\\n                        state.codeBlockModeState = null;\\n                        return \\\"comment\\\";\\n                    }\\n                    if (typeof state.codeBlockModeState === \\\"string\\\") {\\n                        stream.skipToEnd();\\n                        return \\\"comment line-background-cm-code-block-line\\\";\\n                    }\\n                    // 否则，就是用对应的mode来做\\n                    return state.codeBlockModeState.mode.token(stream, state.codeBlockModeState.state) + \\\" line-background-cm-code-block-line\\\";\\n                }\\n\\n                // LaTeX公式块\\n                if (state.LaTeXModeState != null) {\\n                    // 公式块的结束\\n                    if (stream.match('$$')) {\\n                        state.LaTeXModeState = null;\\n                        return \\\"comment\\\";\\n                    }\\n                    if (typeof state.LaTeXModeState === \\\"string\\\") {\\n                        stream.skipToEnd();\\n                        return \\\"comment latex\\\";\\n                    }\\n                    // 否则，就是用对应的mode来做\\n                    return state.LaTeXModeState.mode.token(stream, state.LaTeXModeState.state) + \\\" latex\\\";\\n                }\\n\\n                // 读掉空行 / 行末的空白\\n                if (stream.match(/^\\\\s+$/, true) || stream.match(/\\\\s+$/, true)) return null;\\n                else return state.tokenize(stream, state);\\n            },\\n            innerMode: function(state) {\\n                if (state.codeBlockModeState != null && typeof state.codeBlockModeState === \\\"object\\\") {\\n                    return state.codeBlockModeState;\\n                }\\n                if (state.LaTeXModeState != null && typeof state.LaTeXModeState === \\\"object\\\") {\\n                    return state.LaTeXModeState;\\n                }\\n                return {\\n                    state: state,\\n                    mode: mode\\n                };\\n            },\\n            indent: function(state, textAfter, line) {\\n                if (state.codeBlockModeState != null &&\\n                    typeof state.codeBlockModeState === \\\"object\\\" &&\\n                    typeof state.codeBlockModeState.mode.indent == 'function') {\\n                    return state.codeBlockModeState.mode.indent(state.codeBlockModeState.state, textAfter, line);\\n                }\\n                return CodeMirror.Pass;\\n            },\\n        };\\n        return mode;\\n    });\\n\\n    CodeMirror.defineMIME(\\\"text/vnd.tiddlywiki\\\", \\\"tiddlywiki5\\\");\\n    CodeMirror.defineMIME(\\\"\\\", \\\"tiddlywiki5\\\");\\n});\\n\",\"title\":\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/mode/tiddlywiki5.js\",\"module-type\":\"codemirror\",\"type\":\"application/javascript\"},\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/style.css\":{\"text\":\".CodeMirror-hints {\\n    /* Floating above tiddlers */\\n    z-index: 800 !important;\\n}\\n\\n.CodeMirror-hint {\\n    width: 400px !important;\\n}\\n\\nli.cm-hacked-hint {\\n    display: flex;\\n    justify-content: space-between;\\n    white-space: nowrap;\\n}\\n\\nli.cm-hacked-hint>span:first-of-type {\\n    overflow: hidden;\\n    text-overflow: ellipsis;\\n}\\n\\nli.cm-hacked-hint>span:last-of-type {\\n    padding-left: 10px;\\n    font-weight: bold;\\n    opacity: 0.5;\\n}\\n\\n.CodeMirror-hints-append {\\n    max-height: 20em !important;\\n    width: 300px !important;\\n    color: black;\\n    resize: both;\\n}\\n\\nspan.cm-underlined {\\n    text-decoration-line: underline;\\n}\\n\\n/* Enhance from and specially thank to https://github.com/adithya-badidey/TW5-codemirror-plus */\\nspan.cm-superscript {\\n    vertical-align: super;\\n    font-size: 0.7em;\\n    line-height: 0.1em;\\n}\\n\\nspan.cm-subscript {\\n    font-size: 0.7em;\\n    line-height: 0.5;\\n}\\n\\npre.cm-quote-line {\\n    padding-left: 0.4em !important;\\n    border-left: #444 solid 0.2em !important;\\n}\\n\\n.cm-code-block-line,\\n.latex {\\n    background: rgba(0, 0, 0, 0.2);\\n}\\n\\nspan.cm-h1 {\\n    font-weight: 700;\\n    font-size: 1.383em;\\n    line-height: 1.802em;\\n}\\n\\nspan.cm-h2 {\\n    font-weight: 600;\\n    font-size: 1.296em;\\n    line-height: 1.602em;\\n}\\n\\nspan.cm-h3 {\\n    font-weight: 500;\\n    font-size: 1.215em;\\n    line-height: 1.424em;\\n}\\n\\nspan.cm-h4 {\\n    font-weight: 400;\\n    font-size: 1.138em;\\n    line-height: 1.266em;\\n}\\n\\nspan.cm-h5 {\\n    font-weight: 400;\\n    font-size: 1.067em;\\n    line-height: 1.125em;\\n}\\n\\nspan.cm-h6 {\\n    font-weight: 400;\\n}\\n\\nspan.cm-link {\\n    cursor: pointer;\\n}\\n\\nspan.cm-internallink,\\nspan.cm-externallink {\\n    cursor: pointer;\\n    font-weight: 800;\\n}\\n\\nspan.cm-internallink {\\n    text-decoration: none;\\n}\\n\",\"type\":\"text/css\",\"title\":\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/style.css\",\"tags\":\"$:/tags/Stylesheet\"},\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/mode/tex.js\":{\"text\":\"// CodeMirror, copyright (c) by Marijn Haverbeke and others\\n// Distributed under an MIT license: https://codemirror.net/LICENSE\\n\\n/*\\n * Author: Constantin Jucovschi (c.jucovschi@jacobs-university.de)\\n * Licence: MIT\\n */\\n\\n(function(mod) {\\n    if (typeof exports == \\\"object\\\" && typeof module == \\\"object\\\") // CommonJS\\n        mod(require(\\\"$:/plugins/tiddlywiki/codemirror/lib/codemirror.js\\\"));\\n    else if (typeof define == \\\"function\\\" && define.amd) // AMD\\n        define([\\\"$:/plugins/tiddlywiki/codemirror/lib/codemirror.js\\\"], mod);\\n    else // Plain browser env\\n        mod(CodeMirror);\\n})(function(CodeMirror) {\\n    \\\"use strict\\\";\\n\\n    CodeMirror.defineMode(\\\"tex\\\", function(_config, parserConfig) {\\n        function pushCommand(state, command) {\\n            state.cmdState.push(command);\\n        }\\n\\n        function peekCommand(state) {\\n            if (state.cmdState.length > 0) {\\n                return state.cmdState[state.cmdState.length - 1];\\n            } else {\\n                return null;\\n            }\\n        }\\n\\n        function popCommand(state) {\\n            var plug = state.cmdState.pop();\\n            if (plug) {\\n                plug.closeBracket();\\n            }\\n        }\\n\\n        // returns the non-default plugin closest to the end of the list\\n        function getMostPowerful(state) {\\n            var context = state.cmdState;\\n            for (var i = context.length - 1; i >= 0; i--) {\\n                var plug = context[i];\\n                if (plug.name == \\\"DEFAULT\\\") {\\n                    continue;\\n                }\\n                return plug;\\n            }\\n            return {\\n                styleIdentifier: function() {\\n                    return null;\\n                }\\n            };\\n        }\\n\\n        function addPluginPattern(pluginName, cmdStyle, styles) {\\n            return function() {\\n                this.name = pluginName;\\n                this.bracketNo = 0;\\n                this.style = cmdStyle;\\n                this.styles = styles;\\n                this.argument = null; // \\\\begin and \\\\end have arguments that follow. These are stored in the plugin\\n\\n                this.styleIdentifier = function() {\\n                    return this.styles[this.bracketNo - 1] || null;\\n                };\\n                this.openBracket = function() {\\n                    this.bracketNo++;\\n                    return \\\"bracket\\\";\\n                };\\n                this.closeBracket = function() {};\\n            };\\n        }\\n\\n        var plugins = {};\\n\\n        plugins[\\\"importmodule\\\"] = addPluginPattern(\\\"importmodule\\\", \\\"tag\\\", [\\\"string\\\", \\\"builtin\\\"]);\\n        plugins[\\\"documentclass\\\"] = addPluginPattern(\\\"documentclass\\\", \\\"tag\\\", [\\\"\\\", \\\"atom\\\"]);\\n        plugins[\\\"usepackage\\\"] = addPluginPattern(\\\"usepackage\\\", \\\"tag\\\", [\\\"atom\\\"]);\\n        plugins[\\\"begin\\\"] = addPluginPattern(\\\"begin\\\", \\\"tag\\\", [\\\"atom\\\"]);\\n        plugins[\\\"end\\\"] = addPluginPattern(\\\"end\\\", \\\"tag\\\", [\\\"atom\\\"]);\\n\\n        plugins[\\\"label\\\"] = addPluginPattern(\\\"label\\\", \\\"tag\\\", [\\\"atom\\\"]);\\n        plugins[\\\"ref\\\"] = addPluginPattern(\\\"ref\\\", \\\"tag\\\", [\\\"atom\\\"]);\\n        plugins[\\\"eqref\\\"] = addPluginPattern(\\\"eqref\\\", \\\"tag\\\", [\\\"atom\\\"]);\\n        plugins[\\\"cite\\\"] = addPluginPattern(\\\"cite\\\", \\\"tag\\\", [\\\"atom\\\"]);\\n        plugins[\\\"bibitem\\\"] = addPluginPattern(\\\"bibitem\\\", \\\"tag\\\", [\\\"atom\\\"]);\\n        plugins[\\\"Bibitem\\\"] = addPluginPattern(\\\"Bibitem\\\", \\\"tag\\\", [\\\"atom\\\"]);\\n        plugins[\\\"RBibitem\\\"] = addPluginPattern(\\\"RBibitem\\\", \\\"tag\\\", [\\\"atom\\\"]);\\n\\n        plugins[\\\"DEFAULT\\\"] = function() {\\n            this.name = \\\"DEFAULT\\\";\\n            this.style = \\\"tag\\\";\\n\\n            this.styleIdentifier = this.openBracket = this.closeBracket = function() {};\\n        };\\n\\n        function setState(state, f) {\\n            state.f = f;\\n        }\\n\\n        // called when in a normal (no environment) context\\n        function normal(source, state) {\\n            var plug;\\n            // Do we look like '\\\\command' ?  If so, attempt to apply the plugin 'command'\\n            if (source.match(/^\\\\\\\\[a-zA-Z@]+/)) {\\n                var cmdName = source.current().slice(1);\\n                plug = plugins.hasOwnProperty(cmdName) ? plugins[cmdName] : plugins[\\\"DEFAULT\\\"];\\n                plug = new plug();\\n                pushCommand(state, plug);\\n                setState(state, beginParams);\\n                return plug.style;\\n            }\\n\\n            // escape characters\\n            if (source.match(/^\\\\\\\\[$&%#{}_]/)) {\\n                return \\\"tag\\\";\\n            }\\n\\n            // white space control characters\\n            if (source.match(/^\\\\\\\\[,;!\\\\/\\\\\\\\]/)) {\\n                return \\\"tag\\\";\\n            }\\n\\n            // find if we're starting various math modes\\n            if (source.match(\\\"\\\\\\\\[\\\")) {\\n                setState(state, function(source, state) {\\n                    return inMathMode(source, state, \\\"\\\\\\\\]\\\");\\n                });\\n                return \\\"keyword\\\";\\n            }\\n            if (source.match(\\\"\\\\\\\\(\\\")) {\\n                setState(state, function(source, state) {\\n                    return inMathMode(source, state, \\\"\\\\\\\\)\\\");\\n                });\\n                return \\\"keyword\\\";\\n            }\\n            if (source.match(\\\"$$\\\")) {\\n                setState(state, function(source, state) {\\n                    return inMathMode(source, state, \\\"$$\\\");\\n                });\\n                return \\\"keyword\\\";\\n            }\\n            if (source.match(\\\"$\\\")) {\\n                setState(state, function(source, state) {\\n                    return inMathMode(source, state, \\\"$\\\");\\n                });\\n                return \\\"keyword\\\";\\n            }\\n\\n            var ch = source.next();\\n            if (ch == \\\"%\\\") {\\n                source.skipToEnd();\\n                return \\\"comment\\\";\\n            } else if (ch == '}' || ch == ']') {\\n                plug = peekCommand(state);\\n                if (plug) {\\n                    plug.closeBracket(ch);\\n                    setState(state, beginParams);\\n                } else {\\n                    return \\\"error\\\";\\n                }\\n                return \\\"bracket\\\";\\n            } else if (ch == '{' || ch == '[') {\\n                plug = plugins[\\\"DEFAULT\\\"];\\n                plug = new plug();\\n                pushCommand(state, plug);\\n                return \\\"bracket\\\";\\n            } else if (/\\\\d/.test(ch)) {\\n                source.eatWhile(/[\\\\w.%]/);\\n                return \\\"atom\\\";\\n            } else {\\n                source.eatWhile(/[\\\\w\\\\-_]/);\\n                plug = getMostPowerful(state);\\n                if (plug.name == 'begin') {\\n                    plug.argument = source.current();\\n                }\\n                return plug.styleIdentifier();\\n            }\\n        }\\n\\n        function inMathMode(source, state, endModeSeq) {\\n            if (source.eatSpace()) {\\n                return null;\\n            }\\n            if (endModeSeq && source.match(endModeSeq)) {\\n                setState(state, normal);\\n                return \\\"keyword\\\";\\n            }\\n            if (source.match(/^\\\\\\\\[a-zA-Z@]+/)) {\\n                return \\\"tag\\\";\\n            }\\n            if (source.match(/^[a-zA-Z]+/)) {\\n                return \\\"variable-2\\\";\\n            }\\n            // escape characters\\n            if (source.match(/^\\\\\\\\[$&%#{}_]/)) {\\n                return \\\"tag\\\";\\n            }\\n            // white space control characters\\n            if (source.match(/^\\\\\\\\[,;!\\\\/]/)) {\\n                return \\\"tag\\\";\\n            }\\n            // special math-mode characters\\n            if (source.match(/^[\\\\^_&]/)) {\\n                return \\\"tag\\\";\\n            }\\n            // non-special characters\\n            if (source.match(/^[+\\\\-<>|=,\\\\/@!*:;'\\\"`~#?]/)) {\\n                return null;\\n            }\\n            if (source.match(/^(\\\\d+\\\\.\\\\d*|\\\\d*\\\\.\\\\d+|\\\\d+)/)) {\\n                return \\\"number\\\";\\n            }\\n            var ch = source.next();\\n            if (ch == \\\"{\\\" || ch == \\\"}\\\" || ch == \\\"[\\\" || ch == \\\"]\\\" || ch == \\\"(\\\" || ch == \\\")\\\") {\\n                return \\\"bracket\\\";\\n            }\\n\\n            if (ch == \\\"%\\\") {\\n                source.skipToEnd();\\n                return \\\"comment\\\";\\n            }\\n            return \\\"error\\\";\\n        }\\n\\n        function beginParams(source, state) {\\n            var ch = source.peek(),\\n                lastPlug;\\n            if (ch == '{' || ch == '[') {\\n                lastPlug = peekCommand(state);\\n                lastPlug.openBracket(ch);\\n                source.eat(ch);\\n                setState(state, normal);\\n                return \\\"bracket\\\";\\n            }\\n            if (/[ \\\\t\\\\r]/.test(ch)) {\\n                source.eat(ch);\\n                return null;\\n            }\\n            setState(state, normal);\\n            popCommand(state);\\n\\n            return normal(source, state);\\n        }\\n\\n        return {\\n            startState: function() {\\n                var f = parserConfig.inMathMode ? function(source, state) {\\n                    return inMathMode(source, state);\\n                } : normal;\\n                return {\\n                    cmdState: [],\\n                    f: f\\n                };\\n            },\\n            copyState: function(s) {\\n                return {\\n                    cmdState: s.cmdState.slice(),\\n                    f: s.f\\n                };\\n            },\\n            token: function(stream, state) {\\n                return state.f(stream, state);\\n            },\\n            blankLine: function(state) {\\n                state.f = normal;\\n                state.cmdState.length = 0;\\n            },\\n            lineComment: \\\"%\\\"\\n        };\\n    });\\n\\n    CodeMirror.defineMIME(\\\"text/x-stex\\\", \\\"tex\\\");\\n    CodeMirror.defineMIME(\\\"text/x-latex\\\", \\\"tex\\\");\\n});\\n\",\"type\":\"application/javascript\",\"title\":\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/mode/tex.js\",\"module-type\":\"codemirror\"},\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/readme\":{\"text\":\"View more on [[GitHub Repo|https://github.com/Gk0Wk/TW5-CodeMirror-Enhanced]].\\n\\nCodeMirror editor for TiddlyWiki provides a flexible and rich extension framework (including highlighting, completion, preview and other features), anyone can use this framework to write extension plug-ins for the editor! Currently based on this framework to achieve the following features.\\n\\n* TiddlyWiki5 (`text/vnd.tiddlywiki`) syntax highlighting.\\n* Wiki link auto-tip; * Tiddler preview; * TiddlyWiki5 (`text/vnd.tiddlywiki`)\\n* Tiddler preview; * Tiddler preview.\\n* Clickable links.\\n\\nMore features are in development, welcome to join!\\n\\n---\\n\\n为TiddlyWiki的CodeMirror编辑器提供一个灵活而丰富的扩展框架(包括高亮、补全、预览等功能)，任何人都可以使用此框架为编辑器编写扩展插件！目前基于此框架实现的功能有：\\n\\n* TiddlyWiki5(`text/vnd.tiddlywiki`)语法高亮；\\n* Wiki链接自动提示；\\n* Tiddler预览；\\n* 可点击链接；\\n\\n更多功能正在开发中，欢迎你的加入！\\n\",\"title\":\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/readme\"},\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/core.js\":{\"text\":\"(function (global, factory) {\\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\\n    typeof define === 'function' && define.amd ? define(factory) :\\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.CodeMirrorEnhanced = factory());\\n})(this, (function () { 'use strict';\\n\\n    var InnerService = /** @class */ (function () {\\n        function InnerService(bald) {\\n            this.name = bald.name;\\n            this.tag = bald.tag ? bald.tag : null;\\n            this.onLoad = bald.onLoad;\\n            this.onHook = bald.onHook;\\n            this.addons = {};\\n            this.isLoad = false;\\n            this.lastAddonsUpdateTime = new Date(0);\\n        }\\n        return InnerService;\\n    }());\\n    var services = {};\\n    var api$1 = {};\\n    function loadTiddler(tiddler) {\\n        switch ($tw.wiki.getTiddler(tiddler).fields.type) {\\n            case \\\"application/javascript\\\":\\n                return require(tiddler);\\n            case \\\"application/json\\\":\\n                return JSON.parse($tw.wiki.getTiddlerText(tiddler));\\n            case \\\"application/x-tiddler-dictionary\\\":\\n                return $tw.utils.parseFields($tw.wiki.getTiddlerText(tiddler));\\n            default:\\n                return null;\\n        }\\n    }\\n    function updateService() {\\n        $tw.utils.each(services, function (service, name) {\\n            // Update add-ons\\n            if (!service.tag)\\n                return;\\n            var tiddlers = $tw.wiki.filterTiddlers(\\\"[all[tiddlers+shadows]tag[\\\" + service.tag + \\\"]!is[draft]]\\\");\\n            $tw.utils.each(tiddlers, function (tiddler) {\\n                if (!(tiddler in service.addons)) {\\n                    // load add-on not loaded before\\n                    var addon = loadTiddler(tiddler);\\n                    if (addon)\\n                        service.addons[tiddler] = addon;\\n                }\\n                else {\\n                    // reload add-on updated after last check\\n                    var tiddlerData = $tw.wiki.getTiddler(tiddler);\\n                    if (tiddlerData &&\\n                        tiddlerData.fields &&\\n                        ((tiddlerData.fields.modified &&\\n                            tiddlerData.fields.modified >= service.lastAddonsUpdateTime) ||\\n                            (tiddlerData.fields.created &&\\n                                tiddlerData.fields.created >= service.lastAddonsUpdateTime))) {\\n                        var addon = loadTiddler(tiddler);\\n                        if (addon)\\n                            service.addons[tiddler] = addon;\\n                        else\\n                            delete service.addons[tiddler];\\n                    }\\n                }\\n            });\\n            $tw.utils.each(service.addons, function (addon, tiddler) {\\n                if (tiddler in tiddlers) {\\n                    delete service.addons[tiddler];\\n                }\\n            });\\n            // Update add-on update time\\n            service.lastAddonsUpdateTime = new Date();\\n        });\\n    }\\n    function registerService(service) {\\n        services[service.name] = new InnerService(service);\\n        if (service.api)\\n            api$1[service.name] = service.api;\\n    }\\n    function getAddons(name) {\\n        return services[name].addons;\\n    }\\n    function init$4(CodeMirror, cme) {\\n        // When new editor instance is created, update addons and hook service\\n        CodeMirror.defineInitHook(function (editor) {\\n            updateService();\\n            $tw.utils.each(services, function (service, name) {\\n                if (!service.isLoad)\\n                    service.onLoad(CodeMirror, cme);\\n                service.onHook(editor, cme);\\n            });\\n        });\\n        return api$1;\\n    }\\n\\n    function getBoolean(tiddler, defaultValue) {\\n        var tiddlerText = $tw.wiki.getTiddlerText(tiddler);\\n        return tiddlerText ? tiddlerText.toLowerCase() === \\\"true\\\" : defaultValue;\\n    }\\n    var Options = /** @class */ (function () {\\n        function Options() {\\n        }\\n        Object.defineProperty(Options, \\\"clickableService\\\", {\\n            get: function () {\\n                return getBoolean(\\\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config/clickable-link\\\", false);\\n            },\\n            enumerable: false,\\n            configurable: true\\n        });\\n        Object.defineProperty(Options, \\\"realtimeHint\\\", {\\n            get: function () {\\n                return getBoolean(\\\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config/realtime-hint\\\", false);\\n            },\\n            enumerable: false,\\n            configurable: true\\n        });\\n        Object.defineProperty(Options, \\\"hintPreview\\\", {\\n            get: function () {\\n                return getBoolean(\\\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config/hint-preview\\\", false);\\n            },\\n            enumerable: false,\\n            configurable: true\\n        });\\n        return Options;\\n    }());\\n\\n    var functionKey = /macintosh|mac os x/i.test(navigator.userAgent)\\n        ? \\\"metaKey\\\"\\n        : \\\"ctrlKey\\\";\\n    function init$3() {\\n        registerService({\\n            name: \\\"ClickableToken\\\",\\n            tag: \\\"$:/CodeMirrorEnhanced/ClickableToken\\\",\\n            onLoad: function (CodeMirror, cme) { },\\n            onHook: function (editor, cme) {\\n                editor.on(\\\"mousedown\\\", function (cm, event) {\\n                    if (event[functionKey] && Options.clickableService) {\\n                        var addons = getAddons(\\\"ClickableToken\\\");\\n                        for (var key in addons) {\\n                            if (addons[key].handler(editor, event, cme))\\n                                break;\\n                        }\\n                    }\\n                });\\n            },\\n        });\\n    }\\n\\n    var Hints = /** @class */ (function () {\\n        function Hints(list, from) {\\n            this.list = list;\\n            this.from = from;\\n        }\\n        return Hints;\\n    }());\\n    function globalHintRender(hintNode, hints, curHint) {\\n        var ownerDocument = hintNode.ownerDocument;\\n        // Render (left side) [title]\\n        var titlePartNode = hintNode.appendChild(ownerDocument.createElement(\\\"span\\\"));\\n        if (curHint.render_) {\\n            curHint.render_(titlePartNode, hints, curHint);\\n        }\\n        else {\\n            titlePartNode.appendChild(ownerDocument.createTextNode(curHint.displayText || curHint.text || \\\"\\\"));\\n        }\\n        // Render (right side) [type]\\n        var typeString = curHint.type || null;\\n        if (typeString) {\\n            var typePartNode = hintNode.appendChild(ownerDocument.createElement(\\\"span\\\"));\\n            typePartNode.appendChild(ownerDocument.createTextNode(typeString));\\n        }\\n    }\\n    function init$2() {\\n        registerService({\\n            name: \\\"RealtimeHint\\\",\\n            tag: \\\"$:/CodeMirrorEnhanced/RealtimeHint\\\",\\n            onLoad: function (CodeMirror, cme) {\\n                CodeMirror.registerHelper(\\\"hint\\\", \\\"tiddlywiki5\\\", function (editor, options) {\\n                    return new Promise(function (resolve, reject) {\\n                        try {\\n                            var promises_1 = [];\\n                            $tw.utils.each(getAddons(\\\"RealtimeHint\\\"), function (addon, addonTiddler) {\\n                                promises_1.push(new Promise(function (resolve_, reject_) {\\n                                    try {\\n                                        var hints_1 = addon.hint(editor, options, cme);\\n                                        var tmplist_1 = [];\\n                                        var minPos_1 = editor.getCursor();\\n                                        if (hints_1 && typeof hints_1 === \\\"object\\\") {\\n                                            if (hints_1.from &&\\n                                                CodeMirror.cmpPos(minPos_1, hints_1.from) > 0)\\n                                                minPos_1 = hints_1.from;\\n                                            hints_1.list.forEach(function (hint) {\\n                                                if (typeof hint === \\\"string\\\") {\\n                                                    tmplist_1.push({\\n                                                        text: hint,\\n                                                        from: hints_1.from,\\n                                                        to: hints_1.to,\\n                                                        render_: hints_1.render,\\n                                                        render: globalHintRender,\\n                                                        renderPreview: hints_1.renderPreview,\\n                                                        hint: hints_1.hint,\\n                                                        type: hints_1.type,\\n                                                        className: \\\"cm-hacked-hint\\\",\\n                                                    });\\n                                                }\\n                                                else {\\n                                                    tmplist_1.push({\\n                                                        text: hint.text,\\n                                                        displayText: hint.displayText,\\n                                                        from: hint.from || hints_1.from,\\n                                                        to: hint.to || hints_1.to,\\n                                                        render_: hint.render || hints_1.render,\\n                                                        render: globalHintRender,\\n                                                        renderPreview: hint.renderPreview || hints_1.renderPreview,\\n                                                        hint: hint.hint || hints_1.hint,\\n                                                        type: hint.type || hints_1.type,\\n                                                        renderCache: hint.renderCache,\\n                                                        className: \\\"cm-hacked-hint\\\",\\n                                                    });\\n                                                    if (hint.from &&\\n                                                        CodeMirror.cmpPos(minPos_1, hint.from) > 0)\\n                                                        minPos_1 = hint.from;\\n                                                }\\n                                            });\\n                                        }\\n                                        resolve_(new Hints(tmplist_1, minPos_1));\\n                                    }\\n                                    catch (e) {\\n                                        console.error(\\\"Error occured by tiddler \\\" + addonTiddler + \\\":\\\");\\n                                        console.error(e);\\n                                        resolve_(null);\\n                                    }\\n                                }));\\n                            });\\n                            Promise.all(promises_1).then(function (hintsList) {\\n                                var result = new Hints([], editor.getCursor());\\n                                hintsList.forEach(function (hints) {\\n                                    if (!hints)\\n                                        return;\\n                                    hints.list.forEach(function (hint) {\\n                                        result.list.push(hint);\\n                                    });\\n                                    if (CodeMirror.cmpPos(result.from, hints.from) > 0)\\n                                        result.from = hints.from;\\n                                });\\n                                CodeMirror.on(result, \\\"select\\\", function (selectedData, selectedNode) {\\n                                    if (Options.hintPreview) {\\n                                        var appendId = selectedNode.parentNode.id +\\n                                            \\\"-hint-append\\\";\\n                                        var previewBoxNode_1 = selectedNode.ownerDocument.getElementById(appendId);\\n                                        var shouldCreate = !previewBoxNode_1;\\n                                        if (shouldCreate) {\\n                                            previewBoxNode_1 =\\n                                                selectedNode.ownerDocument.createElement(\\\"div\\\");\\n                                            previewBoxNode_1.id = appendId;\\n                                            previewBoxNode_1.className =\\n                                                \\\"CodeMirror-hints CodeMirror-hints-append \\\" +\\n                                                    editor.options.theme;\\n                                            previewBoxNode_1.style.left =\\n                                                selectedNode.parentNode.offsetLeft +\\n                                                    selectedNode.parentNode.offsetWidth +\\n                                                    \\\"px\\\";\\n                                            previewBoxNode_1.style.top =\\n                                                selectedNode.parentNode.offsetTop +\\n                                                    \\\"px\\\";\\n                                        }\\n                                        var shouldDisplay = void 0;\\n                                        try {\\n                                            if (selectedData.renderCache &&\\n                                                typeof selectedData.renderCache === \\\"string\\\") {\\n                                                previewBoxNode_1.innerHTML = selectedData.renderCache;\\n                                                shouldDisplay = true;\\n                                            }\\n                                            else if (selectedData.renderPreview &&\\n                                                typeof selectedData.renderPreview === \\\"function\\\") {\\n                                                shouldDisplay =\\n                                                    selectedData.renderPreview(previewBoxNode_1, selectedData, selectedNode) === true;\\n                                                if (shouldDisplay &&\\n                                                    previewBoxNode_1.innerHTML.trim() === \\\"\\\")\\n                                                    shouldDisplay = false;\\n                                            }\\n                                            else {\\n                                                shouldDisplay = false;\\n                                            }\\n                                        }\\n                                        catch (e) {\\n                                            previewBoxNode_1.innerText = String(e);\\n                                            console.error(e);\\n                                        }\\n                                        if (shouldDisplay) {\\n                                            if (shouldCreate) {\\n                                                CodeMirror.on(result, \\\"close\\\", function () {\\n                                                    if (selectedNode.ownerDocument.body.contains(previewBoxNode_1))\\n                                                        selectedNode.ownerDocument.body.removeChild(previewBoxNode_1);\\n                                                });\\n                                                selectedNode.ownerDocument.body.appendChild(previewBoxNode_1);\\n                                            }\\n                                        }\\n                                        else if (selectedNode.ownerDocument.body.contains(previewBoxNode_1))\\n                                            selectedNode.ownerDocument.body.removeChild(previewBoxNode_1);\\n                                    }\\n                                });\\n                                resolve(result);\\n                            });\\n                        }\\n                        catch (e) {\\n                            console.error(e);\\n                            resolve(null);\\n                        }\\n                    });\\n                });\\n            },\\n            onHook: function (editor, cme) {\\n                // Hint when text change\\n                editor.on(\\\"change\\\", function (cm, event) {\\n                    // Check if hint is open and hint function exists\\n                    if (cm.state.completeActive && typeof cm.showHint !== \\\"function\\\")\\n                        return;\\n                    // Check if auto hint switch on\\n                    if (!Options.realtimeHint)\\n                        return;\\n                    // If user type something\\n                    if (event.origin === \\\"+input\\\") {\\n                        // Check if cursor point to any stop words\\n                        if (cm.doc.modeOption === \\\"text/vnd.tiddlywiki\\\") {\\n                            // If writting tw text\\n                            if (/[;,]$/.test(event.text[0]))\\n                                return;\\n                        }\\n                        else {\\n                            // If writting other text\\n                            if (/[;,{}()[\\\\]]$/.test(event.text[0]))\\n                                return;\\n                        }\\n                        // Check if just break the line\\n                        if (event.text[0].trim() === \\\"\\\") {\\n                            if (event.text[1]) {\\n                                if (event.text[1].trim() === \\\"\\\")\\n                                    return;\\n                            }\\n                            else\\n                                return;\\n                        }\\n                    }\\n                    // If user delete something\\n                    else if (event.origin === \\\"+delete\\\") {\\n                        // If delete nothing\\n                        if (event.removed[0] === \\\"\\\")\\n                            return;\\n                        // If cursor point to the line head\\n                        if (event.to.ch < 2)\\n                            return;\\n                        // If text of line before the cursor is blank\\n                        var theLine = cm.getDoc().getLine(event.to.line);\\n                        if (!theLine || theLine.substr(0, event.to.ch - 1).trim() === \\\"\\\")\\n                            return;\\n                    }\\n                    // If not above, show hint\\n                    cm.showHint({\\n                        // If there is oly one hint suggestion, don't complete automatically, or can be awful.\\n                        completeSingle: false,\\n                        // Close when pick one of hints\\n                        closeOnPick: true,\\n                    });\\n                });\\n            },\\n        });\\n    }\\n\\n    function getSnippetsList() {\\n        return getAddons(\\\"SnippetsList\\\");\\n    }\\n    function init$1() {\\n        registerService({\\n            name: \\\"SnippetsList\\\",\\n            tag: \\\"$:/CodeMirrorEnhanced/SnippetsList\\\",\\n            onLoad: function (CodeMirror, cme) { },\\n            onHook: function (editor, cme) { },\\n            api: {\\n                getSnippetsList: getSnippetsList,\\n            },\\n        });\\n    }\\n\\n    var activatedEditor = null;\\n    function currentEditor() {\\n        if (!activatedEditor.display.wrapper.ownerDocument.contains(activatedEditor.display.wrapper))\\n            activatedEditor = null;\\n        return activatedEditor;\\n    }\\n    function insertToCurrentEditor(text) {\\n        var editor = currentEditor();\\n        if (!editor)\\n            return false;\\n        editor.replaceRange(text, editor.getCursor(), editor.getCursor(), \\\"input\\\");\\n        return true;\\n    }\\n    function getCurrentSelections() {\\n        var editor = currentEditor();\\n        if (!editor)\\n            return [];\\n        return editor.getSelections();\\n    }\\n    function replaceCurrentSelections(textArray) {\\n        var editor = currentEditor();\\n        if (!editor)\\n            return;\\n        editor.replaceSelections(textArray);\\n    }\\n    function init(CodeMirror) {\\n        // When new editor instance is created, update addons and hook service\\n        CodeMirror.defineInitHook(function (editor) {\\n            editor.on(\\\"focus\\\", function (editor_) {\\n                activatedEditor = editor_;\\n            });\\n        });\\n        return {\\n            currentEditor: currentEditor,\\n            insertToCurrentEditor: insertToCurrentEditor,\\n            getCurrentSelections: getCurrentSelections,\\n            replaceCurrentSelections: replaceCurrentSelections,\\n        };\\n    }\\n\\n    var CodeMirror = require(\\\"$:/plugins/tiddlywiki/codemirror/lib/codemirror.js\\\");\\n    var api = {};\\n    api[\\\"service\\\"] = init$4(CodeMirror, api);\\n    init$3();\\n    init$2();\\n    init$1();\\n    api[\\\"editor\\\"] = init(CodeMirror);\\n    if (window)\\n        window[\\\"$cme\\\"] = api;\\n\\n    return api;\\n\\n}));\\n\",\"type\":\"application/javascript\",\"title\":\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/core.js\",\"module-type\":\"codemirror\"},\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/hint/hint-tw5-tiddler.js\":{\"text\":\"/* Enhance from and specially thank to https://github.com/adithya-badidey/TW5-codemirror-plus */\\n(function(mod) {\\n    if (typeof exports === \\\"object\\\" && typeof module === \\\"object\\\") // CommonJS\\n        module.exports = mod(require(\\\"$:/plugins/tiddlywiki/codemirror/lib/codemirror.js\\\"));\\n    else if (typeof define === \\\"function\\\" && define.amd) // AMD\\n        define([\\\"$:/plugins/tiddlywiki/codemirror/lib/codemirror.js\\\"], mod);\\n    else // Plain browser env\\n        mod(CodeMirror);\\n})(function(CodeMirror) {\\n    \\\"use strict\\\";\\n\\n    function hintTiddler(editor, options, cme) {\\n        var cur = editor.getCursor();\\n        var curLine = editor.getLine(cur.line);\\n        var pointer = cur.ch;\\n        var end = cur.ch;\\n        var max_length = 30;\\n\\n        // wikilink match\\n        // look forward from cursor to [{|\\\"\\n        // if meet ]}.> or line head, stop\\n        var escapeChars = ['.', ']', '}', '>'];\\n        var stopChars = ['[', '{', '|', '\\\"'];\\n        while (pointer) {\\n            var ch = curLine.charAt(pointer - 1);\\n            if (end - pointer > max_length || escapeChars.includes(ch)) {\\n                return null;\\n            }\\n            if (!(stopChars.includes(ch))) {\\n                pointer--;\\n            } else {\\n                break;\\n            }\\n        }\\n        if (pointer == 0) return null;\\n        var curWord = pointer !== end && curLine.slice(pointer, end);\\n\\n        return {\\n            from: CodeMirror.Pos(cur.line, pointer),\\n            to: CodeMirror.Pos(cur.line, end),\\n            renderPreview: function(domNode, selectedData, selectedNode) {\\n                selectedNode.renderCache = domNode.innerHTML = $tw.wiki.renderTiddler(\\\"text/html\\\", selectedData.text);\\n                return true;\\n            },\\n            type: \\\"tiddler\\\",\\n            list: (curLine.charAt(pointer) == '$') ?\\n                $tw.wiki.filterTiddlers(`[all[tiddlers]search:title:literal[${curWord}]!prefix[$:/state]]`) : $tw.wiki.filterTiddlers(`[all[tiddlers]!is[system]!is[shadow]search:title:literal[${curWord}]!prefix[$:/state]]`)\\n        };\\n    }\\n\\n    return {\\n        hint: hintTiddler\\n    };\\n});\\n\",\"type\":\"application/javascript\",\"title\":\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/hint/hint-tw5-tiddler.js\",\"tags\":\"$:/CodeMirrorEnhanced/RealtimeHint\",\"module-type\":\"library\"},\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/hint/hint-tw5-snippet.js\":{\"text\":\"(function(mod) {\\n    if (typeof exports === \\\"object\\\" && typeof module === \\\"object\\\") // CommonJS\\n        module.exports = mod(require(\\\"$:/plugins/tiddlywiki/codemirror/lib/codemirror.js\\\"));\\n    else if (typeof define === \\\"function\\\" && define.amd) // AMD\\n        define([\\\"$:/plugins/tiddlywiki/codemirror/lib/codemirror.js\\\"], mod);\\n    else // Plain browser env\\n        mod(CodeMirror);\\n})(function(CodeMirror) {\\n    \\\"use strict\\\";\\n\\n    function hintSnippet(editor, options, cme) {\\n        var cur = editor.getCursor();\\n        var curLine = editor.getLine(cur.line);\\n        var pointer = cur.ch;\\n        var end = cur.ch;\\n        var max_length = 30;\\n\\n        // Match /xxxx\\n        while (pointer) {\\n            var ch = curLine.charAt(pointer - 1);\\n            if (end - pointer > max_length && !/[\\\\w\\\\.\\\\-\\\\/]/i.test(ch)) {\\n                return null;\\n            }\\n            if (ch !== '/') {\\n                pointer--;\\n            } else {\\n                break;\\n            }\\n        }\\n        if (pointer == 0) return null;\\n        var curWord = curLine.slice(pointer, end);\\n\\n        var hints = [];\\n        $tw.utils.each(cme.service.SnippetsList.getSnippetsList(), function(snippets) {\\n            try {\\n                $tw.utils.each(snippets, function(value, key) {\\n                    if (key.indexOf(curWord) >= 0)\\n                        hints.push({\\n                            text: value,\\n                            displayText: key\\n                        });\\n                });\\n            } catch (e) {\\n                console.error(e);\\n            }\\n        });\\n\\n        $tw.wiki.filterTiddlers('[all[tiddlers+shadows]tag[$:/tags/TextEditor/Snippet]]').forEach(snippetTiddler => {\\n            var snippet = $tw.wiki.getTiddler(snippetTiddler);\\n            if (snippet.fields['snippet-name']) {\\n                if (snippet.fields['snippet-name'].indexOf(curWord) >= 0) {\\n                    hints.push({\\n                        text: {\\n                            snippet: snippet.fields.text,\\n                            preview: '!! ' + snippet.fields.caption + (snippet.fields['snippet-description'] ? ('\\\\n\\\\n' + snippet.fields['snippet-description']) : '')\\n                        },\\n                        displayText: snippet.fields['snippet-name']\\n                    });\\n                }\\n            } else {\\n                var splits = snippet.fields.title.split('/');\\n                var name = splits[splits.length - 1];\\n                if (name.indexOf(curWord) >= 0) {\\n                    hints.push({\\n                        text: {\\n                            snippet: snippet.fields.text,\\n                            preview: '!! ' + snippet.fields.caption + (snippet.fields['snippet-description'] ? ('\\\\n\\\\n' + snippet.fields['snippet-description']) : '')\\n                        },\\n                        displayText: name\\n                    });\\n                }\\n            }\\n        });\\n\\n        return {\\n            from: CodeMirror.Pos(cur.line, pointer - 1),\\n            to: CodeMirror.Pos(cur.line, end),\\n            renderPreview: function(domNode, selectedData, selectedNode) {\\n                selectedNode.renderCache = domNode.innerHTML =\\n                    $tw.wiki.renderText('text/html', 'text/vnd.tiddlywiki', selectedData.text.preview ? selectedData.text.preview : \\\"\\\");\\n                return true;\\n            },\\n            hint: function(editor_, hints_, hint_) {\\n                // Snippet text replace\\n                var replaceText = hint_.text.snippet.replaceAll(/(\\\\$\\\\d+)/g, '');\\n                editor_.replaceRange(replaceText, hint_.from || hints_.from, hint_.to || hints_.to, \\\"complete\\\");\\n                // Relocate cursor to placeholder\\n                var cur_ = editor_.getCursor();\\n                var col = cur_.ch,\\n                    row = cur_.line;\\n                var parts = hint_.text.snippet.split(/(\\\\$\\\\d+)/, 3);\\n                if (parts[2]) {\\n                    var splits = parts[2].split(/\\\\n/);\\n                    if (splits.length > 1) {\\n                        row -= splits.length - 1;\\n                        col = editor.getLine(row).length - splits[0].length;\\n                    } else {\\n                        col -= parts[2].length;\\n                    }\\n                    editor_.setCursor(row, col);\\n                }\\n            },\\n            type: \\\"snippet\\\",\\n            list: hints\\n        };\\n    }\\n\\n    return {\\n        hint: hintSnippet\\n    };\\n});\\n\",\"type\":\"application/javascript\",\"title\":\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/hint/hint-tw5-snippet.js\",\"tags\":\"$:/CodeMirrorEnhanced/RealtimeHint\",\"module-type\":\"library\"},\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/snippetslist/tw5-snippets.json\":{\"text\":\"{\\n    \\\"image\\\": {\\n        \\\"snippet\\\": \\\"[img[$1]]\\\",\\n        \\\"preview\\\": \\\"!! Insert a image.\\\\n\\\\n[img[$:/core/icon]] \\\"\\n    },\\n    \\\"center\\\": {\\n        \\\"snippet\\\": \\\"<center>$1</center>\\\",\\n        \\\"preview\\\": \\\"!! Centralize elements.\\\\n\\\\n<center>like this</center>\\\"\\n    }\\n}\\n\",\"type\":\"application/json\",\"title\":\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/snippetslist/tw5-snippets.json\",\"tags\":\"$:/CodeMirrorEnhanced/SnippetsList\"},\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/clickable/clickable-link.js\":{\"text\":\"/* Enhance from and specially thank to https://github.com/adithya-badidey/TW5-codemirror-plus */\\n(function(mod) {\\n    if (typeof exports === \\\"object\\\" && typeof module === \\\"object\\\") // CommonJS\\n        module.exports = mod();\\n    else if (typeof define === \\\"function\\\" && define.amd) // AMD\\n        define([], mod);\\n    else // Plain browser env\\n        mod();\\n})(function() {\\n    \\\"use strict\\\";\\n\\n    function handler(editor, event, cme) {\\n        if (event.target.classList.contains(\\\"cm-externallink\\\")) {\\n            window.open(event.target.innerText);\\n            return true;\\n        } else if (event.target.classList.contains(\\\"cm-internallink\\\")) {\\n            new $tw.Story().navigateTiddler(event.target.innerText);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    return {\\n        handler: handler\\n    };\\n});\\n\",\"type\":\"application/javascript\",\"title\":\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/clickable/clickable-link.js\",\"tags\":\"$:/CodeMirrorEnhanced/ClickableToken\",\"module-type\":\"library\"},\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/ControlPanel\":{\"text\":\"!! Realtime-hint when typing | 实时代码补全\\n\\nReal-time code completion hints like VSCode while typing (currently only ~WikiLink completion is implemented) and no need to activate with <kbd>Ctrl</kbd>+<kbd>Space</kbd>.\\n\\n无需<kbd>Ctrl</kbd>+<kbd>Space</kbd>，像VSCode一样，在输入时实时进行补全提示(现只支持~WikiLink)。\\n\\n: <$checkbox tiddler=\\\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config/realtime-hint\\\" field=\\\"text\\\" checked=\\\"true\\\" unchecked=\\\"false\\\" default=\\\"true\\\"> <$reveal type=\\\"match\\\" state=\\\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config/realtime-hint\\\" text=\\\"true\\\">Realtime-hint is on | 实时代码补全已开启</$reveal><$reveal type=\\\"nomatch\\\" state=\\\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config/realtime-hint\\\" text=\\\"true\\\">Realtime-hint is off | 实时代码补全已关闭</$reveal></$checkbox>\\n\\n---\\n\\n!! Clickable links | 可点击的链接\\n\\nWhethere ~WikiLinks and URLs are clickable.\\n\\n~WikiLinks和URL是否可以点击。\\n\\n: <$checkbox tiddler=\\\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config/clickable-link\\\" field=\\\"text\\\" checked=\\\"true\\\" unchecked=\\\"false\\\" default=\\\"true\\\"> <$reveal type=\\\"match\\\" state=\\\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config/clickable-link\\\" text=\\\"true\\\">Clickable links is on | 可点击链接已开启</$reveal><$reveal type=\\\"nomatch\\\" state=\\\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config/clickable-link\\\" text=\\\"true\\\">Clickable links is off | 可点击链接已关闭</$reveal></$checkbox>\\n\\n---\\n\\n!! Hint preview | 补全时预览\\n\\nWhen auto-completion is performed, a small document/preview box pops up to the right of the completion box based on the selected suggestion entry.\\n\\n自动补全时，根据所选建议条目，在补全框右侧弹出小的文档/预览框。\\n\\n: <$checkbox tiddler=\\\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config/hint-preview\\\" field=\\\"text\\\" checked=\\\"true\\\" unchecked=\\\"false\\\" default=\\\"true\\\"> <$reveal type=\\\"match\\\" state=\\\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config/hint-preview\\\" text=\\\"true\\\">Hint preview is on | 补全时预览已开启</$reveal><$reveal type=\\\"nomatch\\\" state=\\\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config/hint-preview\\\" text=\\\"true\\\">Hint preview is off | 补全时预览已关闭</$reveal></$checkbox>\\n\",\"title\":\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/ControlPanel\"},\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config/hint-preview\":{\"text\":\"true\",\"title\":\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config/hint-preview\"},\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config/clickable-link\":{\"text\":\"true\",\"title\":\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config/clickable-link\"},\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config/realtime-hint\":{\"text\":\"true\",\"title\":\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config/realtime-hint\"}}}"}